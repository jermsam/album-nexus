### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Artist {
  id: Int!
  name: String!
  Song(after: SongWhereUniqueInput, before: SongWhereUniqueInput, first: Int, last: Int, skip: Int): [Song!]!
}

input ArtistCreateInput {
  name: String!
  Song: SongCreateManyWithoutArtistInput
}

input ArtistCreateOneWithoutSongInput {
  connect: ArtistWhereUniqueInput
  create: ArtistCreateWithoutSongInput
}

input ArtistCreateWithoutSongInput {
  name: String!
}

input ArtistUpdateInput {
  id: Int
  name: String
  Song: SongUpdateManyWithoutArtistInput
}

input ArtistUpdateOneWithoutSongInput {
  connect: ArtistWhereUniqueInput
  create: ArtistCreateWithoutSongInput
  delete: Boolean
  disconnect: Boolean
  update: ArtistUpdateWithoutSongDataInput
  upsert: ArtistUpsertWithoutSongInput
}

input ArtistUpdateWithoutSongDataInput {
  id: Int
  name: String
}

input ArtistUpsertWithoutSongInput {
  create: ArtistCreateWithoutSongInput!
  update: ArtistUpdateWithoutSongDataInput!
}

input ArtistWhereUniqueInput {
  id: Int
  name: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneArtist(data: ArtistCreateInput!): Artist!
  createOneSong(data: SongCreateInput!): Song!
  deleteOneArtist(where: ArtistWhereUniqueInput!): Artist
  deleteOneSong(where: SongWhereUniqueInput!): Song
  updateOneArtist(data: ArtistUpdateInput!, where: ArtistWhereUniqueInput!): Artist
  updateOneSong(data: SongUpdateInput!, where: SongWhereUniqueInput!): Song
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  artist(where: ArtistWhereUniqueInput!): Artist
  artists(after: ArtistWhereUniqueInput, before: ArtistWhereUniqueInput, first: Int, last: Int, skip: Int): [Artist!]!
  song(where: SongWhereUniqueInput!): Song
  songs(after: SongWhereUniqueInput, before: SongWhereUniqueInput, first: Int, last: Int, skip: Int): [Song!]!
}

type Song {
  albumCoverUrl: String
  Artist: Artist
  artistId: Int
  id: Int!
  name: String!
  youtubeId: String
}

input SongCreateInput {
  albumCoverUrl: String
  Artist: ArtistCreateOneWithoutSongInput
  name: String!
  youtubeId: String
}

input SongCreateManyWithoutArtistInput {
  connect: [SongWhereUniqueInput!]
  create: [SongCreateWithoutArtistInput!]
}

input SongCreateWithoutArtistInput {
  albumCoverUrl: String
  name: String!
  youtubeId: String
}

input SongScalarWhereInput {
  albumCoverUrl: NullableStringFilter
  AND: [SongScalarWhereInput!]
  artistId: NullableIntFilter
  id: IntFilter
  name: StringFilter
  NOT: [SongScalarWhereInput!]
  OR: [SongScalarWhereInput!]
  youtubeId: NullableStringFilter
}

input SongUpdateInput {
  albumCoverUrl: String
  Artist: ArtistUpdateOneWithoutSongInput
  id: Int
  name: String
  youtubeId: String
}

input SongUpdateManyDataInput {
  albumCoverUrl: String
  id: Int
  name: String
  youtubeId: String
}

input SongUpdateManyWithoutArtistInput {
  connect: [SongWhereUniqueInput!]
  create: [SongCreateWithoutArtistInput!]
  delete: [SongWhereUniqueInput!]
  deleteMany: [SongScalarWhereInput!]
  disconnect: [SongWhereUniqueInput!]
  set: [SongWhereUniqueInput!]
  update: [SongUpdateWithWhereUniqueWithoutArtistInput!]
  updateMany: [SongUpdateManyWithWhereNestedInput!]
  upsert: [SongUpsertWithWhereUniqueWithoutArtistInput!]
}

input SongUpdateManyWithWhereNestedInput {
  data: SongUpdateManyDataInput!
  where: SongScalarWhereInput!
}

input SongUpdateWithoutArtistDataInput {
  albumCoverUrl: String
  id: Int
  name: String
  youtubeId: String
}

input SongUpdateWithWhereUniqueWithoutArtistInput {
  data: SongUpdateWithoutArtistDataInput!
  where: SongWhereUniqueInput!
}

input SongUpsertWithWhereUniqueWithoutArtistInput {
  create: SongCreateWithoutArtistInput!
  update: SongUpdateWithoutArtistDataInput!
  where: SongWhereUniqueInput!
}

input SongWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
