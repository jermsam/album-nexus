/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ArtistCreateInput: { // input type
    name: string; // String!
    Song?: NexusGenInputs['SongCreateManyWithoutArtistInput'] | null; // SongCreateManyWithoutArtistInput
  }
  ArtistCreateOneWithoutSongInput: { // input type
    connect?: NexusGenInputs['ArtistWhereUniqueInput'] | null; // ArtistWhereUniqueInput
    create?: NexusGenInputs['ArtistCreateWithoutSongInput'] | null; // ArtistCreateWithoutSongInput
  }
  ArtistCreateWithoutSongInput: { // input type
    name: string; // String!
  }
  ArtistUpdateInput: { // input type
    id?: number | null; // Int
    name?: string | null; // String
    Song?: NexusGenInputs['SongUpdateManyWithoutArtistInput'] | null; // SongUpdateManyWithoutArtistInput
  }
  ArtistUpdateOneWithoutSongInput: { // input type
    connect?: NexusGenInputs['ArtistWhereUniqueInput'] | null; // ArtistWhereUniqueInput
    create?: NexusGenInputs['ArtistCreateWithoutSongInput'] | null; // ArtistCreateWithoutSongInput
    delete?: boolean | null; // Boolean
    disconnect?: boolean | null; // Boolean
    update?: NexusGenInputs['ArtistUpdateWithoutSongDataInput'] | null; // ArtistUpdateWithoutSongDataInput
    upsert?: NexusGenInputs['ArtistUpsertWithoutSongInput'] | null; // ArtistUpsertWithoutSongInput
  }
  ArtistUpdateWithoutSongDataInput: { // input type
    id?: number | null; // Int
    name?: string | null; // String
  }
  ArtistUpsertWithoutSongInput: { // input type
    create: NexusGenInputs['ArtistCreateWithoutSongInput']; // ArtistCreateWithoutSongInput!
    update: NexusGenInputs['ArtistUpdateWithoutSongDataInput']; // ArtistUpdateWithoutSongDataInput!
  }
  ArtistWhereUniqueInput: { // input type
    id?: number | null; // Int
    name?: string | null; // String
  }
  IntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number[] | null; // [Int!]
  }
  NullableIntFilter: { // input type
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number[] | null; // [Int!]
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number[] | null; // [Int!]
  }
  NullableStringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
  SongCreateInput: { // input type
    albumCoverUrl?: string | null; // String
    Artist?: NexusGenInputs['ArtistCreateOneWithoutSongInput'] | null; // ArtistCreateOneWithoutSongInput
    name: string; // String!
    youtubeId?: string | null; // String
  }
  SongCreateManyWithoutArtistInput: { // input type
    connect?: NexusGenInputs['SongWhereUniqueInput'][] | null; // [SongWhereUniqueInput!]
    create?: NexusGenInputs['SongCreateWithoutArtistInput'][] | null; // [SongCreateWithoutArtistInput!]
  }
  SongCreateWithoutArtistInput: { // input type
    albumCoverUrl?: string | null; // String
    name: string; // String!
    youtubeId?: string | null; // String
  }
  SongScalarWhereInput: { // input type
    albumCoverUrl?: NexusGenInputs['NullableStringFilter'] | null; // NullableStringFilter
    AND?: NexusGenInputs['SongScalarWhereInput'][] | null; // [SongScalarWhereInput!]
    artistId?: NexusGenInputs['NullableIntFilter'] | null; // NullableIntFilter
    id?: NexusGenInputs['IntFilter'] | null; // IntFilter
    name?: NexusGenInputs['StringFilter'] | null; // StringFilter
    NOT?: NexusGenInputs['SongScalarWhereInput'][] | null; // [SongScalarWhereInput!]
    OR?: NexusGenInputs['SongScalarWhereInput'][] | null; // [SongScalarWhereInput!]
    youtubeId?: NexusGenInputs['NullableStringFilter'] | null; // NullableStringFilter
  }
  SongUpdateInput: { // input type
    albumCoverUrl?: string | null; // String
    Artist?: NexusGenInputs['ArtistUpdateOneWithoutSongInput'] | null; // ArtistUpdateOneWithoutSongInput
    id?: number | null; // Int
    name?: string | null; // String
    youtubeId?: string | null; // String
  }
  SongUpdateManyDataInput: { // input type
    albumCoverUrl?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    youtubeId?: string | null; // String
  }
  SongUpdateManyWithWhereNestedInput: { // input type
    data: NexusGenInputs['SongUpdateManyDataInput']; // SongUpdateManyDataInput!
    where: NexusGenInputs['SongScalarWhereInput']; // SongScalarWhereInput!
  }
  SongUpdateManyWithoutArtistInput: { // input type
    connect?: NexusGenInputs['SongWhereUniqueInput'][] | null; // [SongWhereUniqueInput!]
    create?: NexusGenInputs['SongCreateWithoutArtistInput'][] | null; // [SongCreateWithoutArtistInput!]
    delete?: NexusGenInputs['SongWhereUniqueInput'][] | null; // [SongWhereUniqueInput!]
    deleteMany?: NexusGenInputs['SongScalarWhereInput'][] | null; // [SongScalarWhereInput!]
    disconnect?: NexusGenInputs['SongWhereUniqueInput'][] | null; // [SongWhereUniqueInput!]
    set?: NexusGenInputs['SongWhereUniqueInput'][] | null; // [SongWhereUniqueInput!]
    update?: NexusGenInputs['SongUpdateWithWhereUniqueWithoutArtistInput'][] | null; // [SongUpdateWithWhereUniqueWithoutArtistInput!]
    updateMany?: NexusGenInputs['SongUpdateManyWithWhereNestedInput'][] | null; // [SongUpdateManyWithWhereNestedInput!]
    upsert?: NexusGenInputs['SongUpsertWithWhereUniqueWithoutArtistInput'][] | null; // [SongUpsertWithWhereUniqueWithoutArtistInput!]
  }
  SongUpdateWithWhereUniqueWithoutArtistInput: { // input type
    data: NexusGenInputs['SongUpdateWithoutArtistDataInput']; // SongUpdateWithoutArtistDataInput!
    where: NexusGenInputs['SongWhereUniqueInput']; // SongWhereUniqueInput!
  }
  SongUpdateWithoutArtistDataInput: { // input type
    albumCoverUrl?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    youtubeId?: string | null; // String
  }
  SongUpsertWithWhereUniqueWithoutArtistInput: { // input type
    create: NexusGenInputs['SongCreateWithoutArtistInput']; // SongCreateWithoutArtistInput!
    update: NexusGenInputs['SongUpdateWithoutArtistDataInput']; // SongUpdateWithoutArtistDataInput!
    where: NexusGenInputs['SongWhereUniqueInput']; // SongWhereUniqueInput!
  }
  SongWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  StringFilter: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string[] | null; // [String!]
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string[] | null; // [String!]
    startsWith?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Artist: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  Song: { // root type
    albumCoverUrl?: string | null; // String
    artistId?: number | null; // Int
    id: number; // Int!
    name: string; // String!
    youtubeId?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  ArtistCreateInput: NexusGenInputs['ArtistCreateInput'];
  ArtistCreateOneWithoutSongInput: NexusGenInputs['ArtistCreateOneWithoutSongInput'];
  ArtistCreateWithoutSongInput: NexusGenInputs['ArtistCreateWithoutSongInput'];
  ArtistUpdateInput: NexusGenInputs['ArtistUpdateInput'];
  ArtistUpdateOneWithoutSongInput: NexusGenInputs['ArtistUpdateOneWithoutSongInput'];
  ArtistUpdateWithoutSongDataInput: NexusGenInputs['ArtistUpdateWithoutSongDataInput'];
  ArtistUpsertWithoutSongInput: NexusGenInputs['ArtistUpsertWithoutSongInput'];
  ArtistWhereUniqueInput: NexusGenInputs['ArtistWhereUniqueInput'];
  IntFilter: NexusGenInputs['IntFilter'];
  NullableIntFilter: NexusGenInputs['NullableIntFilter'];
  NullableStringFilter: NexusGenInputs['NullableStringFilter'];
  SongCreateInput: NexusGenInputs['SongCreateInput'];
  SongCreateManyWithoutArtistInput: NexusGenInputs['SongCreateManyWithoutArtistInput'];
  SongCreateWithoutArtistInput: NexusGenInputs['SongCreateWithoutArtistInput'];
  SongScalarWhereInput: NexusGenInputs['SongScalarWhereInput'];
  SongUpdateInput: NexusGenInputs['SongUpdateInput'];
  SongUpdateManyDataInput: NexusGenInputs['SongUpdateManyDataInput'];
  SongUpdateManyWithWhereNestedInput: NexusGenInputs['SongUpdateManyWithWhereNestedInput'];
  SongUpdateManyWithoutArtistInput: NexusGenInputs['SongUpdateManyWithoutArtistInput'];
  SongUpdateWithWhereUniqueWithoutArtistInput: NexusGenInputs['SongUpdateWithWhereUniqueWithoutArtistInput'];
  SongUpdateWithoutArtistDataInput: NexusGenInputs['SongUpdateWithoutArtistDataInput'];
  SongUpsertWithWhereUniqueWithoutArtistInput: NexusGenInputs['SongUpsertWithWhereUniqueWithoutArtistInput'];
  SongWhereUniqueInput: NexusGenInputs['SongWhereUniqueInput'];
  StringFilter: NexusGenInputs['StringFilter'];
}

export interface NexusGenFieldTypes {
  Artist: { // field return type
    id: number; // Int!
    name: string; // String!
    Song: NexusGenRootTypes['Song'][]; // [Song!]!
  }
  Mutation: { // field return type
    createOneArtist: NexusGenRootTypes['Artist']; // Artist!
    createOneSong: NexusGenRootTypes['Song']; // Song!
    deleteOneArtist: NexusGenRootTypes['Artist'] | null; // Artist
    deleteOneSong: NexusGenRootTypes['Song'] | null; // Song
    updateOneArtist: NexusGenRootTypes['Artist'] | null; // Artist
    updateOneSong: NexusGenRootTypes['Song'] | null; // Song
  }
  Query: { // field return type
    artist: NexusGenRootTypes['Artist'] | null; // Artist
    artists: NexusGenRootTypes['Artist'][]; // [Artist!]!
    song: NexusGenRootTypes['Song'] | null; // Song
    songs: NexusGenRootTypes['Song'][]; // [Song!]!
  }
  Song: { // field return type
    albumCoverUrl: string | null; // String
    Artist: NexusGenRootTypes['Artist'] | null; // Artist
    artistId: number | null; // Int
    id: number; // Int!
    name: string; // String!
    youtubeId: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Artist: {
    Song: { // args
      after?: NexusGenInputs['SongWhereUniqueInput'] | null; // SongWhereUniqueInput
      before?: NexusGenInputs['SongWhereUniqueInput'] | null; // SongWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Mutation: {
    createOneArtist: { // args
      data: NexusGenInputs['ArtistCreateInput']; // ArtistCreateInput!
    }
    createOneSong: { // args
      data: NexusGenInputs['SongCreateInput']; // SongCreateInput!
    }
    deleteOneArtist: { // args
      where: NexusGenInputs['ArtistWhereUniqueInput']; // ArtistWhereUniqueInput!
    }
    deleteOneSong: { // args
      where: NexusGenInputs['SongWhereUniqueInput']; // SongWhereUniqueInput!
    }
    updateOneArtist: { // args
      data: NexusGenInputs['ArtistUpdateInput']; // ArtistUpdateInput!
      where: NexusGenInputs['ArtistWhereUniqueInput']; // ArtistWhereUniqueInput!
    }
    updateOneSong: { // args
      data: NexusGenInputs['SongUpdateInput']; // SongUpdateInput!
      where: NexusGenInputs['SongWhereUniqueInput']; // SongWhereUniqueInput!
    }
  }
  Query: {
    artist: { // args
      where: NexusGenInputs['ArtistWhereUniqueInput']; // ArtistWhereUniqueInput!
    }
    artists: { // args
      after?: NexusGenInputs['ArtistWhereUniqueInput'] | null; // ArtistWhereUniqueInput
      before?: NexusGenInputs['ArtistWhereUniqueInput'] | null; // ArtistWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
    song: { // args
      where: NexusGenInputs['SongWhereUniqueInput']; // SongWhereUniqueInput!
    }
    songs: { // args
      after?: NexusGenInputs['SongWhereUniqueInput'] | null; // SongWhereUniqueInput
      before?: NexusGenInputs['SongWhereUniqueInput'] | null; // SongWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Artist" | "Mutation" | "Query" | "Song";

export type NexusGenInputNames = "ArtistCreateInput" | "ArtistCreateOneWithoutSongInput" | "ArtistCreateWithoutSongInput" | "ArtistUpdateInput" | "ArtistUpdateOneWithoutSongInput" | "ArtistUpdateWithoutSongDataInput" | "ArtistUpsertWithoutSongInput" | "ArtistWhereUniqueInput" | "IntFilter" | "NullableIntFilter" | "NullableStringFilter" | "SongCreateInput" | "SongCreateManyWithoutArtistInput" | "SongCreateWithoutArtistInput" | "SongScalarWhereInput" | "SongUpdateInput" | "SongUpdateManyDataInput" | "SongUpdateManyWithWhereNestedInput" | "SongUpdateManyWithoutArtistInput" | "SongUpdateWithWhereUniqueWithoutArtistInput" | "SongUpdateWithoutArtistDataInput" | "SongUpsertWithWhereUniqueWithoutArtistInput" | "SongWhereUniqueInput" | "StringFilter";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}